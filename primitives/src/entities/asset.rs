//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "asset")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub class_id: i64,
    pub contract_id: i64,
    pub chain_id: String,
    pub asset_id: String,
    pub tx_hash: Option<String>,
    pub index: Option<i64>,
    pub address: String,
    pub value: String,
    pub created_at: Option<TimeDateTimeWithTimeZone>,
    pub updated_at: Option<TimeDateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum GroupAs {
    Address,
    Count,
}

impl ColumnTrait for GroupAs {
    type EntityName = Entity;

    fn def(&self) -> ColumnDef {
        match self {
            Self::Address => ColumnType::String(None).def(),
            Self::Count => ColumnType::BigUnsigned.def(),
        }
    }
}
